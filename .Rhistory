gam   <- parlist$gam
m       <- length(alpha)
m
if (!is.null(z)) {
z <- as.matrix(z)
p <- ncol(z)
y   <- y - z %*% gam
}
y
y <- as.vector(y)
x     <- as.matrix(x)
x1    <- cbind(1,x)
q     <- ncol(x)
q
beta
W  <- t(t(matrix(rep.int(y,m), ncol=m) - x1 %*% mubeta)/sigma)
W
f  <- t(t(exp(-W^2/2)/sqrt(2*pi))/sigma)  # pdf, n by m
f0 <- colSums(t(f)*alpha)                 # data pdf, nt by 1 FIXME!!!
f0
H <- hermite(W,sigma)
w_m <- t(t(f)*alpha)/f0  # n by m matrix of w_{ji}
w_m
rowSums(w_m)
f[,1:(m-1)]
f
H[,,1]
W_p <- matrix(0,ncol = m, nrow = n)
W_p
j = 1
W[,j]
matrix(W[,j],nr=t)
rowSums(matrix(W[,j],nr=t))
W_p <- matrix(0,ncol = m, nrow = n)
for (j in 1:m){
W_p[,j] <- colSums(matrix(W[,j],nr=t))
}
W_p
W
W,f are nt by m
colSums(matrix(-(W[,j])^2/2,nr=t))
f
(sqrt(2*pi)^t
)
sqrt(2*pi)
for (j in 1:m){
W_p[,j] <- colSums(matrix(W[,j],nr=t))
f_p[,j] <- exp(colSums(matrix(-(W[,j])^2/2,nr=t)))/(sqrt(2*pi)^t)/sigma[j]
}
f_p <- matrix(0,ncol=m,nrow=n)
for (j in 1:m){
W_p[,j] <- colSums(matrix(W[,j],nr=t))
f_p[,j] <- exp(colSums(matrix(-(W[,j])^2/2,nr=t)))/(sqrt(2*pi)^t)/sigma[j]
}
f_p
f
H
T <- 2
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
y <- Data$Y
x <- Data$X
z <- Data$Z
z
y
x
n  <- ncol(y)
t  <- nrow(y)
y  <- as.vector(y)
p  <- 0
alpha   <- parlist$alpha
mubeta  <- parlist$mubeta
sigma   <- parlist$sigma
gam   <- parlist$gam
m       <- length(alpha)
if (!is.null(z)) {
z <- as.matrix(z)
p <- ncol(z)
y   <- y - z %*% gam
}
pvals <- NULL
x     <- as.matrix(x)
x1    <- cbind(1,x)
q     <- ncol(x)
W  <- t(t(matrix(rep.int(y,m), ncol=m) - x1 %*% mubeta)/sigma)
W_p <- matrix(0,ncol = m, nrow = n)
f  <- t(t(exp(-W^2/2)/sqrt(2*pi))/sigma)  # pdf, nt by m
f_p <- matrix(0,ncol=m,nrow=n)
for (j in 1:m){
W_p[,j] <- colSums(matrix(W[,j],nr=t))
f_p[,j] <- exp(colSums(matrix(-(W[,j])^2/2,nr=t)))/(sqrt(2*pi)^t)/sigma[j]
}
f0 <- colSums(t(f)*alpha)                 # data pdf, nt by 1
f0_p <- colSums(t(f)*alpha)                 # data pdf, n by 1
H <- hermite(W,sigma)
w_m <- t(t(f)*alpha)/f0  # n by m matrix of w_{ji}
if (m == 1) {
S_alpha <- NULL
} else {
S_alpha <- (f[,1:(m-1)] - f[,m])/f0
}
S_mu    <- w_m*H[,,1]
S_beta  <- matrix(0, nrow=n, ncol=q*m)
S_mu
S_beta
S_mu
W_p
f_p
f_p[200,]
f[399:400,]
f[399,] * f[400,]
f_p <- matrix(0,ncol=m,nrow=n)
for (j in 1:m){
# W_p[,j] <- colSums(matrix(W[,j],nr=t))
f_p[,j] <- exp(colSums(matrix(-(W[,j])^2/2,nr=t)))/(sqrt(2*pi)^t)/(sigma[j]^t)
}
f[399,] * f[400,]
f_p[200,]
W_T <- matrix(0,ncol = m, nrow = n) #Sum of error
f  <- t(t(exp(-W^2/2)/sqrt(2*pi))/sigma)  # pdf, nt by m
f_T <- matrix(0,ncol=m,nrow=n)
for (j in 1:m){
W_T[,j] <- colSums(matrix(W[,j],nr=t))
f_T[,j] <- exp(colSums(matrix(-(W[,j])^2/2,nr=t)))/(sqrt(2*pi)^t)/(sigma[j]^t)
}
f0 <- colSums(t(f)*alpha)                 # data pdf, nt by 1
f0_T <- colSums(t(f)*alpha)                 # data pdf, n by 1
f0_T
f0
f0_T <- colSums(t(f_T)*alpha)                 # data pdf, n by 1
f0_T
w_m_T <- t(t(f_T)*alpha)/f0_T  # n by m matrix of w_{ji}
w_m_T
f_T
H[,,1]
as.matrix(H[,,1],nr=t)
t
as.matrix(H[,j,1],nr = t)
as.matrix(H[,,1],nr=t)
matrix(H[,j,1],nr = t)
colSums(matrix(H[,j,1],nr = t))
S_mu
S_mu <- matrix(0,nrow = n, ncol = m)
for (j in 1:m){
S_mu[,j] <-colSums(matrix(H[,j,1],nr = t))
}
S_mu <- matrix(0,nrow = n, ncol = m)
for (j in 1:m){
S_mu[,j] <-colSums(matrix(H[,j,1],nr = t))
}
S_mu
S_mu <- matrix(0,nrow = n, ncol = m)
for (j in 1:m){
S_mu[,j] <-w_m_T[,j] * colSums(matrix(H[,j,1],nr = t))
}
S_mu
matrix(H[,j,1]*x,nr = t)
matrix(x*H[,j,1],nr = t)
x
S_beta
x*S_mu[, j]
s* H[,,j]
x * H[,,j]
x * H[,,1]
size(x)
dim(x)
dim(H[,,1])
dim(S_mu[,j])
dim(H[,j,1])
H[,j,1]
x * H[,j,1]
H_1x <- x * H[,j,1]
H_1x
H_1x[,1]
colSums(matrix(H_1x[,1],nr=t))
H_1x[,1]
S_beta  <- matrix(0, nrow=n, ncol=q*m)
for (j in 1:m){
H_1 <- colSums(matrix(H[,j,1],nr = t))
S_mu[,j] <-w_m_T[,j] * H_1
H_1x <- x * H[,j,1]
for (qq in 1:q){
S_beta[, ((j-1)*q+qq)] <- colSums(matrix(H_1x[,qq],nr=t))
}
}
colSums(matrix(H_1x[,1],nr=t))
S_beta
S_mu <- matrix(0,nrow = n, ncol = m)
S_beta  <- matrix(0, nrow=n, ncol=q*m)
for (j in 1:m){
H_1 <- colSums(matrix(H[,j,1],nr = t))
S_mu[,j] <-w_m_T[,j] * H_1
H_1x <- x * H[,j,1]
for (qq in 1:q){
S_beta[, ((j-1)*q+qq)] <- colSums(matrix(H_1x[,qq],nr=t))
}
}
S_mu
S_beta
H[j,1]
H[,j,1]
H_1x <- x[,qq] * H[,j,1]
H_1x
for (qq in 1:q){
H_1x <- x[,qq] * H[,j,1]
S_beta[, ((j-1)*q+qq)] <- colSums(matrix(H_1x,nr=t))
}
S_mu <- matrix(0,nrow = n, ncol = m)
S_beta  <- matrix(0, nrow=n, ncol=q*m)
for (j in 1:m){
H_1 <- colSums(matrix(H[,j,1],nr = t))
S_mu[,j] <-w_m_T[,j] * H_1
for (qq in 1:q){
H_1x <- x[,qq] * H[,j,1]
S_beta[, ((j-1)*q+qq)] <- colSums(matrix(H_1x,nr=t))
}
}
S_beta
S_mu
rnormregmix()
?sample
install.packages("nloptr")
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
install.packages("knitr")
knitr::opts_chunk$set(echo = TRUE)
library(normalregMix)
library(normalRegPanelMix)
#sourceCpp("/Users/Hiro/Dropbox/R/LearningR/src/em_C4.cpp")
set.seed(123)
#Generate Data
N <- 200 #Number of people
T <- 1 #Time periods
M <- 2 #Number of Type
p <- 0 #Number of Z
q <- 3 #Number of X
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- matrix(0)
beta <- matrix(1:6,nrow=M)
alpha <- c(0.6,0.4) #Probability
#Has 0.6 probability to be type 1
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
parlist <- list('alpha' = alpha, 'mubeta' = t(cbind(mu,beta)),
'sigma' = sigma, 'gam' = gamma)
htaupair <- c(1,0.1)
regpanelmixPhiInit(y, x, z , parlist, htaupair[1], htaupair[2])
regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
regpanelmixMaxPhi(y=Data$Y, x=Data$X, parlist=parlist, z=Data$Z , an=1/N)
knitr::opts_chunk$set(echo = TRUE)
library(normalregMix)
library(normalRegPanelMix)
#sourceCpp("/Users/Hiro/Dropbox/R/LearningR/src/em_C4.cpp")
set.seed(123)
#Generate Data
N <- 200 #Number of people
T <- 1 #Time periods
M <- 2 #Number of Type
p <- 0 #Number of Z
q <- 3 #Number of X
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- matrix(0)
beta <- matrix(1:6,nrow=M)
alpha <- c(0.6,0.4) #Probability
#Has 0.6 probability to be type 1
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
p
q
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
parlist <- list('alpha' = alpha, 'mubeta' = t(cbind(mu,beta)),
'sigma' = sigma, 'gam' = gamma)
htaupair <- c(1,0.1)
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
b_0
install.packages("roxygen2")
source('~/.active-rstudio-document', echo=TRUE)
parlist <- list('alpha' = alpha, 'mubeta' = t(cbind(mu,beta)),
'sigma' = sigma, 'gam' = gamma)
parlist
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- matrix(0)
beta <- matrix(0)
alpha <- c(0.6,0.4) #Probability
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
parlist <- list('alpha' = alpha, 'mubeta' = t(cbind(mu,beta)),
'sigma' = sigma, 'gam' = gamma)
htaupair <- c(1,0.1)
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
size(x)
length(x)
size(Data$X)
Data$x
ones(1)
source('C:/Users/haoja/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/regpanelmixPhiInit.R')
source('C:/Users/haoja/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/getCoefficient.R')
library(roxygen2)
document()
library(devtools)
document()
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
library(normalregMix)
library(normalRegPanelMix)
#sourceCpp("/Users/Hiro/Dropbox/R/LearningR/src/em_C4.cpp")
set.seed(123)
#Generate Data
N <- 200 #Number of people
T <- 1 #Time periods
M <- 2 #Number of Type
p <- 0 #Number of Z
q <- 0 #Number of X
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- matrix(0)
beta <- matrix(0)
alpha <- c(0.6,0.4) #Probability
#Has 0.6 probability to be type 1
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
parlist <- list('alpha' = alpha, 'mubeta' = t(cbind(mu,beta)),
'sigma' = sigma, 'gam' = gamma)
htaupair <- c(1,0.1)
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
y <- Data$Y
x <- Data$X
z <- Data$Z
z
x
ncol(NULL)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
Data$X
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
library(normalRegPanelMix)
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
knitr::opts_chunk$set(echo = TRUE)
# library(normalregMix)
library(normalRegPanelMix)
#sourceCpp("/Users/Hiro/Dropbox/R/LearningR/src/em_C4.cpp")
set.seed(123)
#Generate Data
N <- 200 #Number of people
T <- 1 #Time periods
M <- 2 #Number of Type
p <- 0 #Number of Z
q <- 3 #Number of X
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- matrix(0)
beta <- matrix(1:6,nrow=M)
alpha <- c(0.6,0.4) #Probability
#Has 0.6 probability to be type 1
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
parlist <- list('alpha' = alpha, 'mubeta' = t(cbind(mu,beta)),
'sigma' = sigma, 'gam' = gamma)
htaupair <- c(1,0.1)
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
regpanelmixMaxPhi(y=Data$Y, x=Data$X, parlist=parlist, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
set.seed(123)
#Generate Data
N <- 200 #Number of people
T <- 1 #Time periods
M <- 2 #Number of Type
p <- 0 #Number of Z
q <- 3 #Number of X
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- matrix(0)
beta <- matrix(1:6,nrow=M)
alpha <- c(0.6,0.4) #Probability
#Has 0.6 probability to be type 1
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
parlist <- list('alpha' = alpha, 'mubeta' = t(cbind(mu,beta)),
'sigma' = sigma, 'gam' = gamma)
htaupair <- c(1,0.1)
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
regpanelmixMaxPhi(y=Data$Y, x=Data$X, parlist=parlist, z=Data$Z , an=1/N)
parlist2 <- list('alpha' = alpha, 'mubeta' = t(cbind(mu,matrix(0))),
'sigma' = sigma, 'gam' = gamma)
parlist2 <- list('alpha' = alpha, 'mubeta' = mu,
'sigma' = sigma, 'gam' = gamma)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
parlist2 <- list('alpha' = alpha, 'mubeta' = mu,
'sigma' = sigma, 'gam' = gamma)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
regpanelmixMaxPhi(y=Data$Y, x=Data$X, parlist=parlist, z=Data$Z , an=1/N)
m
m = 2
m = 3
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
regpanelmixMaxPhi(y=Data$Y, x=Data$X, parlist=parlist, z=Data$Z , an=1/N)
p
q
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
regpanelmixMaxPhi(y=Data$Y, x=Data$X, parlist=parlist, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=Data$X, parlist=parlist, z=Data$Z , an=1/N)
b_0
b_0 <- regpanelmixPhiInit(Data$Y, NULL, Data$Z , parlist, htaupair[1], htaupair[2])
b_1 <- regpanelmixPhiInit(Data$Y, NULL, Data$Z , parlist, htaupair[1], htaupair[2])
b_1 <- regpanelmixPhiInit(Data$Y, x = NULL, Data$Z , parlist, htaupair[1], htaupair[2])
parlist
b_1 <- regpanelmixPhiInit(Data$Y, x = NULL, Data$Z , parlist2, htaupair[1], htaupair[2])
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
b_0 <- regpanelmixPhiInit(Data$Y, Data$X, Data$Z , parlist, htaupair[1], htaupair[2])
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixMaxPhi(y=Data$Y, x=NULL, parlist=parlist2, z=Data$Z , an=1/N)
regpanelmixMaxPhi(y=Data$Y, x=Data$X, parlist=parlist, z=Data$Z , an=1/N)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixCrit(y = Data$Y,x = Data$X)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
set.seed(123)
#Generate Data
N <- 200 #Number of people
T <- 1 #Time periods
M <- 2 #Number of Type
p <- 0 #Number of Z
q <- 3 #Number of X
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- matrix(0)
beta <- matrix(1:6,nrow=M)
alpha <- c(0.6,0.4) #Probability
#Has 0.6 probability to be type 1
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
regpanelmixCrit(y = Data$Y,x = Data$X)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixCrit(y = Data$Y,x = Data$X)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixCrit(y = Data$Y,x = Data$X)
source('C:/Users/haoja/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/regpanelmix_crit.R')
regpanelmixCrit(y = Data$Y,x = Data$X)
regpanelmixCrit(y = Data$Y,x = Data$X,parlist = parlist)
mubeta
parlist
set.seed(123)
#Generate Data
N <- 200 #Number of people
T <- 1 #Time periods
M <- 2 #Number of Type
p <- 0 #Number of Z
q <- 3 #Number of X
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- matrix(0)
beta <- matrix(1:6,nrow=M)
alpha <- c(0.6,0.4) #Probability
#Has 0.6 probability to be type 1
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
regpanelmixCrit(y = Data$Y,x = Data$X,parlist = parlist)
parlist <- list('alpha' = alpha, 'mubeta' = t(cbind(mu,beta)),
'sigma' = sigma, 'gam' = gamma)
regpanelmixCrit(y = Data$Y,x = Data$X,parlist = parlist)
library(normalRegPanelMix)
knitr::opts_chunk$set(echo = TRUE)
regpanelmixCrit(y = Data$Y,x = Data$X,parlist = parlist)
library(normalRegPanelMix)
library(normalRegPanelMix)
library(normalRegPanelMix)
