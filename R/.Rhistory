library(normalRegPanelMix)
library(normalregMix)
set.seed(123)
#Generate data
N <- 200 #Number of people
T <- 1 #Time periods
M <- 2 #Number of Type
p <- 0 #Number of Z
q <- 3 #Number of X
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- matrix(0)
beta <- matrix(1:6,nrow=M)
alpha <- c(0.6,0.4) #Probability
#Has 0.6 probability to be type 1
data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
#NormalPanelMixPMLE
out<-regpanelmixPMLE(y=data$Y,x=data$X,m=2,vcov.method = "none")
alpha_hat <- as.vector(out$coefficients[1:M])
mubeta_hat <- as.vector(out$coefficients[M+1:((q+1)*M)])
ind <- rep(0,0)
for (mm in 0:(M-1)){
ind <- append(ind,(2:(q+1))+mm*(q+1))
}
beta_hat <- t(matrix(mubeta_hat[ind],nr=q))
sigma_hat <- out$coefficients[((q+2)*M+1):((q+3)*M)]
mu_hat <- mubeta_hat[(0:(M-1))*(q+1)+1]
gamma_hat <- out$coefficients[((q+3)*M+1):((q+4)*M)]
rNormalPanelMixMLE(alpha_hat,mu_hat,sigma_hat,gamma_hat,beta_hat,data$Y,data$X,data$Z,M,p,q)
rNormalPanelMixMLE(alpha_hat,mu_hat,sigma_hat,beta_hat,gamma_hat,data$Y,data$X,data$Z,M,p,q)
#NormalPanelMixPMLE
T <- 2
data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
regpanelmixPMLE(y=data$Y,x=data$X,m=2,vcov.method = "none")
regmixPMLE(y=data$Y,x=data$X,m=2,vcov.method = "none")
library(nloptr)
out
eval_f_1 <- function(x){ return(-rNormalPanelMixMLE_vec(x,y=Data$Y,x=Data$X,z=Data$Z,M,p,q))}
out$coefficients
getCoefficient(out$coefficients,N,T,M,p,q)
coef.cpp <- getCoefficient(out$coefficients,N,T,M,p,q)
coef.cpp
as.vector(coef.cpp)
vector(coef.cpp)
coef.cpp
c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$beta,coef.cpp$gamma)
c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$beta,coef.cpp$gamma)
coef.vec <- c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$beta,coef.cpp$gamma)
out.slsqp <- slsqp(coef.vec,eval_f_1)
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
regpanelmixPMLE(y=Data$Y,x=Data$X,m=2,vcov.method = "none")
out <- regpanelmixPMLE(y=Data$Y,x=Data$X,m=2,vcov.method = "none")
out
N
T
coef.cpp <- getCoefficient(out$coefficients,N,T,M,p,q)
coef.cpp
eval_f_1 <- function(x){ return(-rNormalPanelMixMLE_vec(x,y=Data$Y,x=Data$X,z=Data$Z,M,p,q))}
coef.vec <- c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$beta,coef.cpp$gamma)
coef.vec
out.slsqp <- slsqp(coef.vec,eval_f_1)
coef.vec
coef.vec
M
alpha <- b0[1:M]
mu <- b0[(M+1):(2*M)]
b0 <- coef.vec
alpha <- b0[1:M]
mu <- b0[(M+1):(2*M)]
sigma <- b0[(2*M+1):(3*M)]
alpha
mu
sigma
if (q != 0){
beta <- b0[(3*M+1):((3+q)*M)]
}else{
beta <- NULL}
beta
alpha <- alpha / sum(alpha)
mubeta <- cbind(mu,beta)
mubeta
mubeta <- cbind(mu,matrix(beta,nr=M))
mubeta
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/rNormalpanelmixMLE_vec.R')
coef.vec <- c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$beta,coef.cpp$gamma)
out.slsqp <- slsqp(coef.vec,eval_f_1)
coef.vec <- c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$beta)
out.slsqp <- slsqp(coef.vec,eval_f_1)
out.slsqp
out
beta
beta <- matrix(1:6,nrow=M)
beta
T <- 5
data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X,m=M,vcov.method = "none")
coef.cpp <- getCoefficient(out.cpp$coefficients,N,T,M,p,q)
eval_f_1 <- function(x){ return(-rNormalPanelMixMLE_vec(x,y=Data$Y,x=Data$X,z=Data$Z,M,p,q))}
coef.vec <- c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$beta)
out.slsqp <- slsqp(coef.vec,eval_f_1)
```{r}
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X,m=M,vcov.method = "none")
out.cpp
print(out.cpp)
print(out.cpp)
print(out.slsqp)
T <- 10
data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X,m=M,vcov.method = "none")
coef.cpp <- getCoefficient(out.cpp$coefficients,N,T,M,p,q)
eval_f_1 <- function(x){ return(-rNormalPanelMixMLE_vec(x,y=Data$Y,x=Data$X,z=Data$Z,M,p,q))}
coef.vec <- c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$beta)
out.slsqp <- slsqp(coef.vec,eval_f_1)
print(out.cpp)
print(out.slsqp)
data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X,m=M,vcov.method = "none")
out.cpp
q = 0
beta <- matrix(0)
p = 2
gamma <- c(3,4)
data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X,m=M,vcov.method = "none")
out.cpp
y
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X,m=M,vcov.method = "none")
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/regpanelmixPMLE.R')
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X,m=M,vcov.method = "none")
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/regpanelmixPMLE.R')
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X,m=M,vcov.method = "none")
coef.cpp <- getCoefficient(out.cpp$coefficients,N,T,M,p,q)
eval_f_1 <- function(x){ return(-rNormalPanelMixMLE_vec(x,y=Data$Y,x=Data$X,z=Data$Z,M,p,q))}
coef.vec <- c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$beta)
out.slsqp <- slsqp(coef.vec,eval_f_1)
coef.vec
coef.cpp
q = 0
beta <- matrix(0)
p = 2
gamma <- c(3,4)
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X,m=M,vcov.method = "none")
out.cpp
sigma
Data$X
Data$Z
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X, z = Data$Z,m=M,vcov.method = "none")
regmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, vcov.method = "none")
normalmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, vcov.method = "none")
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X, z = Data$Z,m=M,vcov.method = "none")
out.cpp
gamma <- c(4:6)
gamma
beta <- matrix(0)
alpha <- c(0.6,0.4) #Probability
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
p
p <- 3 #Number of Z
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X, z = Data$Z,m=M,vcov.method = "none")
out.cpp
normalmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, vcov.method = "none")
normalpanelmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, vcov.method = "none")
Data$Y
dim(Data$Y)
dim(Data$Z)
dim(as.vector(Data$Z))
dim(as.vector(Data$Y))
as.vector(Data$Y
)
a <- as.vector(Data$Y)
dim(a)
size(a)
length(a)
normalpanelmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, vcov.method = "none")
y <- Data$Y
z <- Data$Z
x <- Data$X
t <- dim(y)[1] #Number of year
n <- dim(y)[2] #Number of firms
p <- 0
p
q
p
if (!is.null(z)) {
z     <- as.matrix(z)
p     <- ncol(z)
if (nrow(z) != n) { stop("y and z must have the same number of rows.") }
ls.out   <- lsfit(z, y)
sd0    <- sqrt(mean(ls.out$residuals^2))
} else {
sd0   <- sd(y) * sqrt((n - 1) / n)
}
z
p
ls.out
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/normalpanelmixPMLE.R')
normalpanelmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/normalpanelmixPMLE.R')
normalpanelmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/normalpanelmixPMLEinit.R')
normalpanelmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
Data$X
Data$Y
Data$Z
library(normalregMix)
library(normalRegPanelMix)
library(nloptr)
normalmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
T
N <- 200 #Number of people
T <- 1 #Time periods
M <- 2 #Number of Type
p <- 3 #Number of Z
q <- 0 #Number of X
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X, z = Data$Z,m=M,vcov.method = "none")
normalmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
normalpanelmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
N <- 200 #Number of people
T <- 10 #Time periods
M <- 2 #Number of Type
p <- 3 #Number of Z
q <- 0 #Number of X
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- c(4:6)
beta <- matrix(0)
alpha <- c(0.6,0.4) #Probability
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X, z = Data$Z,m=M,vcov.method = "none")
out.cpp
normalmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
normalpanelmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
normalpanelmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
T
normalmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X, z = Data$Z,m=M,vcov.method = "none")
coef.cpp <- getCoefficient(out.cpp$coefficients,N,T,M,p,q)
coef.cpp
coef.vec <- c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$gamma)
coef.vec
out.cpp
normalpanelmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/regpanelmixPMLE.R')
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X, z = Data$Z,m=M,vcov.method = "none")
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/regpanelmixPMLE.R')
out.cpp <- regpanelmixPMLE(y=Data$Y,x=Data$X, z = Data$Z,m=M,vcov.method = "none")
out.cpp
normalpanelmixPMLE(y = Data$Y,x = Data$X,z = Data$Z, m = M, vcov.method = "none")
coef.cpp <- getCoefficient(out.cpp$coefficients,N,T,M,p,q)
coef.cpp
coef.vec
coef.cpp <- getCoefficient(out.cpp$coefficients,N,T,M,p,q)
coef.cpp
out.cpp
coefficients <- out.cpp$coefficients
coefficients
alpha_hat <- as.vector(out$coefficients[1:M])
mubeta_hat <- as.vector(out$coefficients[M+1:((q+1)*M)])
mubeta_hat
if (q != 0){
ind <- rep(0,0)
for (mm in 0:(M-1)){
ind <- append(ind,(2:(q+1))+mm*(q+1))
}
beta_hat <- t(matrix(mubeta_hat[ind],nr=q))
}else{
beta_hat = matrix(0)
}
ind
q
ind <- rep(0,0)
ind
if (q != 0){
ind <- rep(0,0)
for (mm in 0:(M-1)){
ind <- append(ind,(2:(q+1))+mm*(q+1))
}
beta_hat <- t(matrix(mubeta_hat[ind],nr=q))
}else{
beta_hat = matrix(0)
}
beta_hat
ind
sigma_hat <- out$coefficients[((q+2)*M+1):((q+3)*M)]
sigma_hat
alpha_hat <- as.vector(coefficients[1:M])
mubeta_hat <- as.vector(coefficients[M+1:((q+1)*M)])
mu_hat <- mubeta_hat[(0:(M-1))*(q+1)+1]
if (q != 0){
ind <- rep(0,0)
for (mm in 0:(M-1)){
ind <- append(ind,(2:(q+1))+mm*(q+1))
}
beta_hat <- t(matrix(mubeta_hat[ind],nr=q))
}else{
beta_hat = matrix(0)
}
beta
mubeta
mubeta_hat
mu_hat
sigma_hat <- coefficients[((q+2)*M+1):((q+3)*M)]
sigma_hat
gamma_hat
coefficients
gamma_hat <- coefficients[((q+3)*M+1):((q+3)*M+p)]
gamma_hat
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/getCoefficient.R')
coef.cpp <- getCoefficient(out.cpp$coefficients,N,T,M,p,q)
coef.cpp
coef.vec <- c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$gamma)
coef.vec
out.slsqp <- slsqp(coef.vec,eval_f_1)
rNormalPanelMixMLE_vec(coef.vec,y=Data$Y,x=Data$X,z=Data$Z,M,p,q)
rNormalPanelMixMLE_vec(coef.vec,y=Data$Y,x=Data$X,z=Data$Z,M,p,q)
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/rNormalpanelmixMLE_vec.R')
out.slsqp
eval_f_1 <- function(x){ return(-rNormalPanelMixMLE_vec(x,y=Data$Y,x=Data$X,z=Data$Z,M,p,q))}
coef.vec <- c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$gamma)
out.slsqp <- slsqp(coef.vec,eval_f_1)
out.slsqp <- slsqp(coef.vec,eval_f_1)
rNormalPanelMixMLE_vec(coef.vec,y=Data$Y,x=Data$X,z=Data$Z,M,p,q)
z <- Data$Z
z
gamma
gamma
z %*% gamma
y
t <- nrow(y)
n <- ncol(y)
y <- as.vector(y)
b0 <- coef.vec
b0
alpha <- b0[1:M]
mu <- b0[(M+1):(2*M)]
sigma <- b0[(2*M+1):(3*M)]
if (q != 0){
beta <- b0[(3*M+1):((3+q)*M)]
}else{
beta <- NULL}
beta
gamma
if (p != 0){
gamma <- b0[((3+q)*M+1):((3+q+p)*M)]
}else{
gamma <- NULL
}
gamma
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/rNormalpanelmixMLE_vec.R')
out.slsqp <- slsqp(coef.vec,eval_f_1)
out.slsqp
out.cpp<-regpanelmixPMLE(y=Data$Y,x=Data$X,m=2,vcov.method = "none")
alpha_hat <- as.vector(out$coefficients[1:M])
mubeta_hat <- as.vector(out$coefficients[M+1:((q+1)*M)])
ind <- rep(0,0)
for (mm in 0:(M-1)){
ind <- append(ind,(2:(q+1))+mm*(q+1))
}
beta_hat <- t(matrix(mubeta_hat[ind],nr=q))
out.cpp<-regpanelmixPMLE(y=Data$Y,x=Data$X,m=2,vcov.method = "none")
coef.cpp <- getCoefficient(out.cpp$coefficients,N,T,M,p,q)
eval_f_1 <- function(x){ return(-rNormalPanelMixMLE_vec(x,y=Data$Y,x=Data$X,z=Data$Z,M,p,q))}
coef.cpp
p
q
N <- 200 #Number of people
T <- 1 #Time periods
M <- 2 #Number of Type
p <- 0 #Number of Z
q <- 3 #Number of X
mu <- c(1,2)
sigma <- c(0.5,0.25)
gamma <- matrix(0)
beta <- matrix(1:6,nrow=M)
alpha <- c(0.6,0.4) #Probability
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
out.cpp<-regpanelmixPMLE(y=Data$Y,x=Data$X,m=2,vcov.method = "none")
set.seed(123)
#Generate Data
N <- 500 #Number of people
T <- 2 #Time periods
M <- 2 #Number of Type
p <- 0 #Number of Z
q <- 0 #Length of beta
mu <- c(1,2)
sigma <- c(0.5,0.25)
Data <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)
out <- normalpanelmixPMLE(y=Data$Y,m=2,vcov.method = "none")
normalmixPMLE(y=Data$Y,m=2,vcov.method = "none")
alpha_hat <- as.vector(out$coefficients[1:M])
mubeta_hat <- as.vector(out$coefficients[M+1:((q+1)*M)])
mu_hat <- mubeta_hat[(0:(M-1))*(q+1)+1]
if (q != 0){
ind <- rep(0,0)
for (mm in 0:(M-1)){
ind <- append(ind,(2:(q+1))+mm*(q+1))
}
beta_hat <- t(matrix(mubeta_hat[ind],nr=q))
}else{
beta_hat = NULL
}
if (q != 0){
gamma_hat <- out$coefficients[((q+3)*M+1):((q+4)*M)]
}else{
gamma_hat <- NULL
}
sigma_hat <- out$coefficients[((q+2)*M+1):((q+3)*M)]
if (is.null(Data$X)){
x <- matrix(0)
}else{
x <- Data$X
}
if (is.null(Data$Z)){
z <- matrix(0)
}else{
z <- Data$X
}
parlist <- list('alpha'=alpha,'mu'=mu,'sigma'=sigma,'gamma'=gamma)
rNormalPanelMixMLE (alpha_hat,mu_hat,sigma_hat,beta_hat,gamma_hat,Data$Y,Data$X,Data$Z,M,p,q)
# cppregpanelmixMLE(as.vector(Data$Y),x,z,alpha_hat,mu_hat,sigma_hat,beta_hat,gamma_hat,M,q,p,T)
cppregpanelmixMLE(as.vector(Data$Y),x,z,alpha_hat,mu_hat,sigma_hat,matrix(0),matrix(0),M,q,p,T)
vec <- c(alpha_hat,mu_hat,sigma_hat,beta_hat,gamma_hat)
rNormalPanelMixMLE_vec(out$coefficients,y=Data$Y,x=Data$X,z=Data$Z,M,p,q)
eval_f_1 <- function(x){ return(-rNormalPanelMixMLE_vec(x,y=Data$Y,x=Data$X,z=Data$Z,M,p,q))}
out.slsqp <- slsqp(out$coefficients,eval_f_1)
print(out$coefficients)
print(out.slsqp$par)
source('C:/Users/Jasmine/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix/R/regpanelmixPMLE.R')
Data
out.cpp<-regpanelmixPMLE(y=Data$Y,x=Data$X,m=2,vcov.method = "none")
coef.cpp <- getCoefficient(out.cpp$coefficients,N,T,M,p,q)
eval_f_1 <- function(x){ return(-rNormalPanelMixMLE_vec(x,y=Data$Y,x=Data$X,z=Data$Z,M,p,q))}
coef.vec <- c(coef.cpp$alpha,coef.cpp$mu,coef.cpp$sigma,coef.cpp$beta)
out.slsqp <- slsqp(coef.vec,eval_f_1)
out.cpp<-regpanelmixPMLE(y=Data$Y,x=Data$X,m=2,vcov.method = "none")
