{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Test on normal panel mixture model\"\nauthor: \"Jasmine Hao\"\ndate: \"December 21, 2016\"\noutput:\n  html_document: default\n  pdf_document: default\n---\n\n```{r setup, include=FALSE}\nknitr::opts_chunk$set(echo = TRUE)\n```\n\n## R Markdown\n\nThis is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.\n\nWhen you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:\n##Load library\n```{r eval=TRUE}\nlibrary(normalregMix)\nlibrary(normalRegPanelMix)\n#sourceCpp(\"/Users/Hiro/Dropbox/R/LearningR/src/em_C4.cpp\") \n```\n##Test Data generating function\n```{r}\nN <- 30 #Number of people\nT <- 3 #Time periods\nM <- 2 #Number of Type\np <- 0 #Number of Z\nq <- 2 #Length of beta\nmu <- c(1,2)\nsigma <- c(0.5,0.25)\n# gamma <- matrix(c(1,2,3,4,5,6),nrow=M)\nalpha <- c(0.6,0.4) #Probability\n#Has 0.6 probability to be type 1\nninits <- 3\ngamma = c(1,2)\nbeta = matrix(1:4,nr=M)\nData <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)\n\n```\n\n\n###Test likelihood function written.\n```{r}\nout<-regpanelmixPMLE(y=Data$Y,x=Data$X, z=Data$Z,m=2,vcov.method = \"none\")\n\n\n```\n\n##T=1\n\n```{r }\nset.seed(123)\n#Generate Data\nN <- 500 #Number of people\nT <- 2 #Time periods\nM <- 2 #Number of Type\np <- 0 #Number of Z\nq <- 0 #Length of beta\nmu <- c(1,2)\nsigma <- c(0.5,0.25)\n# gamma <- matrix(c(1,2,3,4,5,6),nrow=M)\nalpha <- c(0.6,0.4) #Probability\n#Has 0.6 probability to be type 1\nninits <- 3\ngamma = NULL\nbeta = NULL\nData <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)\n```\n\n\nTry non-panel version fist, use T=1.\nThe result should be same for normalpanelmix and normalmix.\n```{r eval=TRUE}\n#NormalPanelMixPMLE\nnormalpanelmixPMLE(y=Data$Y,m=2,vcov.method = \"none\")\nnormalmixPMLE(y=Data$Y,m=2,vcov.method = \"none\")\n\n```\n\n##T =2 \n\n```{r}\nset.seed(123)\n#Generate Data\nN <- 500 #Number of people\nT <- 2 #Time periods\nM <- 2 #Number of Type\np <- 0 #Number of Z\nq <- 0 #Length of beta\nmu <- c(1,2)\nsigma <- c(0.5,0.25)\n\nData <- generateData(alpha,mu,sigma,gamma,beta,N,T,M,p,q)\nout <- normalpanelmixPMLE(y=Data$Y,m=2,vcov.method = \"none\")\nnormalmixPMLE(y=Data$Y,m=2,vcov.method = \"none\")\nalpha_hat <- as.vector(out$coefficients[1:M])\nmubeta_hat <- as.vector(out$coefficients[M+1:((q+1)*M)])\nmu_hat <- mubeta_hat[(0:(M-1))*(q+1)+1]\nif (q != 0){\n  ind <- rep(0,0)\n  for (mm in 0:(M-1)){\n  ind <- append(ind,(2:(q+1))+mm*(q+1))\n  }\n  beta_hat <- t(matrix(mubeta_hat[ind],nr=q))\n}else{\n  beta_hat = NULL\n}\n\nif (q != 0){\n  gamma_hat <- out$coefficients[((q+3)*M+1):((q+4)*M)]\n}else{\n  gamma_hat <- NULL\n}\n\nsigma_hat <- out$coefficients[((q+2)*M+1):((q+3)*M)]\n\nif (is.null(Data$X)){\n  x <- matrix(0)\n  }else{\n  x <- Data$X\n}\nif (is.null(Data$Z)){\n  z <- matrix(0)\n  }else{\n  z <- Data$X\n  }\nparlist <- list('alpha'=alpha,'mu'=mu,'sigma'=sigma,'gamma'=gamma)\nrNormalPanelMixMLE (alpha_hat,mu_hat,sigma_hat,beta_hat,gamma_hat,Data$Y,Data$X,Data$Z,M,p,q)\n# cppregpanelmixMLE(as.vector(Data$Y),x,z,alpha_hat,mu_hat,sigma_hat,beta_hat,gamma_hat,M,q,p,T)\n\ncppregpanelmixMLE(as.vector(Data$Y),x,z,alpha_hat,mu_hat,sigma_hat,matrix(0),matrix(0),M,q,p,T)\n\nvec <- c(alpha_hat,mu_hat,sigma_hat,beta_hat,gamma_hat)\nrNormalPanelMixMLE_vec(out$coefficients,y=Data$Y,x=Data$X,z=Data$Z,M,p,q)\neval_f_1 <- function(x){ return(-rNormalPanelMixMLE_vec(x,y=Data$Y,x=Data$X,z=Data$Z,M,p,q))}\nout.slsqp <- slsqp(out$coefficients,eval_f_1)\nprint(out$coefficients)\nprint(out.slsqp$par)\n```\n\n###Test normal panel mix phi function.\n```{r}\nparlist <- list('alpha'=alpha,'mu'=mu,'sigma'=sigma,'gamma'=gamma)\nan <- 1/N\nnormalpanelmixMaxPhi(y = Data$Y,parlist = parlist,an = an)\n```\n\n\n\n```{r eval=FALSE}\neval_f <- function(x){ return(rNormalPanelMixMLE(Y,b=x,m=2))}\nfor (jn in 1:ninits){\n  b_0 <- out$coef[jn,]\n  res <- slsqp(x=b_0,fn = eval_f)\n  print(res$par)\n  print(res$value)\n}\n```\n\nUse random drawn initial value for slsqp of likelihood\n\n",
    "created" : 1484642689636.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "59809363",
    "id" : "E89529D5",
    "lastKnownWriteTime" : 1484026356,
    "last_content_update" : 1484642698954,
    "path" : "C:/Users/haoja/Dropbox/Dropbox/workspace/R/package/normalRegPanelMix_0.1/test.normalpanelmix.Rmd",
    "project_path" : null,
    "properties" : {
        "last_setup_crc32" : ""
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}